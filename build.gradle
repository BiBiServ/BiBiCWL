/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.0.2/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    // use maven central
    mavenCentral()

    // bibiserv stuff is hosted on jitpack.io
    maven { url 'https://jitpack.io' }
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:21.0'
    
    // get bibiserv abstraction from jitpack.io
    compile 'com.github.BiBiServ.bibiserv:bibiservabstraction:2.1.0'
    
    // add jackson yaml functionality
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.0'
    
    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
    
    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

// Define the main class for the application
mainClassName = 'de/unibi/cebitec/bibiworkflow/app/App'

//ext.mainClass = 'de.unibi.cebitec.bibiworkflow.app.App'
//ext.cliargs = '-i'

run.args = ['--gui-mode']
//run.args = ["--input=/home/pol3waf/Programming/Projects/MasterProject/bibi-workflow/xml/blast_final.bs2"]


task copyDeps(type: Copy) {
  from configurations.runtime
  into 'build/lib'
}

// custom run task
//task runargs(type : JavaExec ){
//   main = mainClass
//   classpath = sourceSets.main.runtimeClasspath
//   args cliargs
//}
